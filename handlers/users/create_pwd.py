import re
from typing import Union

import asyncpg
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from keyboards.inline import cancel
from keyboards.inline.pwd_keyboard import get_pwd_keyboard
from keyboards.inline.start_keyboard import to_start_keyboard, start_callback
from loader import dp, db
from states import Pwd
from utils.misc.random_sticker import get_random_sticker


@dp.message_handler(Command('set_password'), state="*")
@dp.callback_query_handler(start_callback.filter(key="add_pwd"))
async def ask_site(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    await state.finish()
    text = "–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æüìé\n–ù–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ç–≤–æ–π –ø–∞—Ä–æ–ª—åüìÇ"
    if isinstance(message, types.Message):
        await message.answer(text)
        await Pwd.first()
    elif isinstance(message, types.CallbackQuery):
        call = message
        await call.answer()
        await call.message.edit_text(text, reply_markup=to_start_keyboard)
        await Pwd.first()


# –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–µ–π—Ç–∞ Pwd
@dp.message_handler(state=Pwd.P1, regexp=re.compile(r"^[0-9a-zA-z!@#$%^&*()+.;':]{,18}$"))
async def ask_pwd(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–ø–µ—Ä—å –ø–∞—Ä–æ–ª—åüîë")
    async with state.proxy() as data:
        data["site"] = message.text
    await Pwd.next()


@dp.message_handler(state=Pwd.P1)
async def err_site(message: types.Message):
    mood = "bad"
    sticker = await get_random_sticker(mood)
    text = (f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: <code>{message.text}</code> ‚≠ïÔ∏è\n"
            "–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 18 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "–ò —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä, –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, –∏–ª–∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤\n"
            "<pre>** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑‚úÖ **</pre>")
    await message.answer_sticker(sticker=sticker.get("url"))
    await message.answer(text, reply_markup=cancel)


# –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–µ–π—Ç–∞ Pwd
@dp.message_handler(state=Pwd.P2, regexp=re.compile(r"^[0-9a-zA-z!@#$%^&*()+.;':]{6,18}$"))
async def set_pwd(message: types.Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as data:
        site = data["site"]
    try:
        await db.add_pwd(message.from_user.id, site, message.text)
        mood = "good"
        sticker = await get_random_sticker(mood)
        if sticker:
            await message.answer_sticker(sticker.get("url"))
        else:
            await message.answer(f"–°—Ç–∏–∫–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º <code>{mood}</code>üòÅüòÜü•π")
        await message.answer(
            "--------- –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ‚¨áÔ∏è ---------",
            reply_markup=get_pwd_keyboard
        )
        await state.finish()
    except asyncpg.exceptions.UniqueViolationError:
        mood = "bad"
        sticker = await get_random_sticker(mood)
        if sticker:
            await message.answer_sticker(sticker.get("url"))
        else:
            await message.answer(f"–°—Ç–∏–∫–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º <code>{mood}</code>üòÅüòÜü•π")
        await message.answer("–¢–∞–∫–æ–π –ø–∞—Ä–æ–ª—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö‚ùå\n"
                             "** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑!‚úÖ **",
                             reply_markup=cancel)


@dp.message_handler(state=Pwd.P2)
async def err_pwd(message: types.Message):
    mood = "bad"
    sticker = await get_random_sticker(mood)
    text = (f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å: <code>{message.text}</code> ‚≠ïÔ∏è\n"
            "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "–ò –Ω–µ –±–æ–ª—å—à–µ 18 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "–ò —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä, –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, –∏–ª–∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤\n"
            "<pre>** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑‚úÖ **</pre>")
    await message.answer_sticker(sticker=sticker.get("url"))
    await message.answer(text, reply_markup=cancel)
