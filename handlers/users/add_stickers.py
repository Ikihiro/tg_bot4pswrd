from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from keyboards.inline import cancel
from loader import dp, db
from states import Sticker


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã stickers
# @dp.message_handler(Command("all_stickers"))
# async def get_all_stickers(message: types.Message):
#     stickers = await db.select_all_stickers()
#     for stick in stickers:
#         await message.answer(f"{stick.get('id')} - {stick.get('mood')}")
#         await message.answer_sticker(stick.get('url'))


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –ø–µ—Ä–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
@dp.message_handler(Command("add_sticker"))
async def ask_mood(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ (good, bad –∏ —Ç.–¥.)", reply_markup=cancel)
    await Sticker.S1.set()


# –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–µ–π—Ç–∞ –°—Ç–∏–∫–µ—Ä
@dp.message_handler(state=Sticker.S1, content_types=[types.ContentType.TEXT])
async def ask_sticker(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["mood"] = message.text
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–ø–µ—Ä—å —Å—Ç–∏–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å‚ò∫Ô∏è", reply_markup=cancel)
    await Sticker.next()


@dp.message_handler(state=Sticker.S1, content_types=[types.ContentType.ANY])
async def err_ask_sticker(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞üòé",
                         reply_markup=cancel)


# –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–µ–π—Ç–∞ –°—Ç–∏–∫–µ—Ä–∞
@dp.message_handler(state=Sticker.S2, content_types=[types.ContentType.STICKER])
async def add_sticker(message: types.Message, state: FSMContext):
    sticker_id = message.sticker.file_id
    async with state.proxy() as data:
        mood = data["mood"]
    await db.add_sticker(mood, sticker_id)
    await message.answer("–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Öüü¢", reply_markup=cancel)
    await state.finish()


@dp.message_handler(state=Sticker.S2)
async def err_sticker(message: types.Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–∏–∫–µ—Ä ü•∏\n"
                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â–µ —Ä–∞–∑üòÉ",
                         reply_markup=cancel)
